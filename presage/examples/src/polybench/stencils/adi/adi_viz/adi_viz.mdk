
Title         : PRESAGE Demo
Bibliography: presage.bib

<style>
    body.madoko {
      max-width: 75pc;       
    }   
</style>


[TITLE]

# Overview
[PRESAGE](http://arxiv.org/abs/1606.08948) (available on [Github](https://utahfmr.github.io/PRESAGE/)) 
is aimed at protecting structured address computations (SACs) against soft error induced bit-flips, and 
is developed using [LLVM](http://llvm.org/) compiler infrastructure. The underlying principle of PRESAGE is that maximizing 
the flow of error helps in better error detection coverage at lower overhead. PRESAGE achieves it by 
introducing dependency chains between instructions used for SACs at LLVM IR level.We demonstrate the efficacy of 
PRESAGE by applying it on a publicly available implementation of Alternating Direction Implicit (ADI) kernel provided in 
[PolyBench/C benchmark suite](http://web.cse.ohio-state.edu/~pouchet/software/polybench/). 
The ADI kernel is used in simulations of physical problems such as heat conduction, diffusion equation, 
etc.

# ADI C Implementation

## ADI Kernel

```javascript
 for (t=1; t<=tsteps; t++) {
    //Column Sweep
    for (i=1; i<n-1; i++) {
      v[i] = 1.0;
      p[i*n] = 0.0;
      q[i*n] = v[i];
      for (j=1; j<n-1; j++) {
        p[i*n+j] = -c / (a*p[i*n+(j-1)]+b);
        q[i*n+j] = ( -d*u[j*n+(i-1)]+(1.0+2.0*d)*u[j*n+i] - 
                     f*u[j*n+(i+1)]
                     -a*q[i*n+(j-1)])/(a*p[i*n+(j-1)]+b );
      }
      
      v[n*(n-1)+i] = 1.0;
      for (j=n-2; j>=1; j--) {
        v[j*n+i] = p[i*n+j] * v[(j+1)*n+i] + q[i*n+j];
      }
    }

    //Row Sweep
    for (i=1; i<n-1; i++) {
      u[i*n] = 1.0;
      p[i*n] = 0.0;
      q[i*n] = u[i*n];
      for (j=1; j<n-1; j++) {
        p[i*n+j] = -f / (d*p[i*n+(j-1)]+e);
        q[i*n+j] = ( -a*v[(i-1)*n+j]+(1.0+2.0*a)*v[i*n+j] 
                     -c*v[(i+1)*n+j]
                     -d*q[i*n+(j-1)])/(d*p[i*n+(j-1)]+e );
      }
      u[i*n+(n-1)] = 1.0;

      for (j=n-2; j>=1; j--) {
            u[i*n+j] = p[i*n+j] * u[i*n+(j+1)] + q[i*n+j];
      }
    }    
```

## Initialization Routine

```javascript
/* Array initialization. */
void init_array (int n,double *u)
{
  int i, j;
  srand(0);
  for (i = 0; i < n; i++)
    for (j = 0; j < n; j++)
      {
    	u[i*n+j] =  (double) rand(); 
      }
}
```


# Visualizations
In order to demonstrate how PRESAGE maximizes the flow of errors affecting
SACs in the ADI kernel, we first visualize the time evolution computational 
data stored in 2d-grids during a fault-free execution using input parameters 
described below. Given that the ADI kernel performs time-stepped computations 
on four computational 2D-grids denoted by arrays u, v, p, and q, we visualize 
the computational data pertaining to these grids.

## Experimental Details

Input parameters and setup details are provided below:

```javascript
Time-steps: 50
Grid size (for all 2d-grids u,v,p, and q): 25x25
Operating System: Ubuntu 16.04
CPU: Intel(R) Core(TM) i7-6700HQ
LLVM version: 3.9
```

## Time Evolution of Computational Data in 2D-Grids

Figure [#fig-native] shows the time evolution of the computational data stored
in 2d-grids u, v, p, and q during a fault-free execution using the input parameters 
described earlier.

  ~ Figure { #fig-native; caption: "Time Evolution of Computational Data for Grids  u (top-left), v (top-right), p (bottom-left), and q." }
  ![native_u] ![native_v]
  ![native_p] ![native_q]
  ~
  [native_u]: http://www.cs.utah.edu/~vinu/research/stencils/presage/presage_results/vizs/barc/native_u.gif { width:400px; vertical-align:middle }
  [native_q]: http://www.cs.utah.edu/~vinu/research/stencils/presage/presage_results/vizs/barc/native_q.gif { width:400px; vertical-align:middle }
  [native_p]: http://www.cs.utah.edu/~vinu/research/stencils/presage/presage_results/vizs/barc/native_p.gif { width:400px; vertical-align:middle }
  [native_v]: http://www.cs.utah.edu/~vinu/research/stencils/presage/presage_results/vizs/barc/native_v.gif { width:400px; vertical-align:middle }


## PRESAGE in Action!

Next, we perform two independent set of fault injection experiments on the native and the 
PRESAGE-transformed versions of the ADI kernel respectively using the same setup and input parameters 
described earlier. The first experiment-set comprises a fault-free and a faulty execution on the 
native version of the ADI kernel where as the second experiment-set consists of a fault-free and a 
faulty execution on the PRESAGE-transformed version of the ADI kernel. The fault injection profile 
chosen for both the experiment-sets targets the address of the element with coordinates (12,12) of 
the grid **q** during 25th time-step for fault injection by flipping its 5th bit from LSB.

Figure [#fig-psg] plots the differential computational data obtained by subtracting the values stored in
the grid q during a fault-free execution from their corresponding values observed during the faulty execution
in both the experiment sets. The l.h.s. of Figure [#fig-psg] refers to the experiment-set pertaining
to the native version of ADI kernel where as the r.h.s. refers to the PRESAGE-transformed one. Clearly, 
due to PRESAGE enabling the flow of errors, we can observe a significantly higher number of elements
getting silently corrupted in the r.h.s as compared to the l.h.s. of Figure [#fig-psg]. 

 ~ Figure { #fig-psg; caption: "Time Evolution of Differential Computational Data for Grid q using Native (Left) and PRESAGE-transformed (Right) versions of the ADI Kernel." }
 ![dnf] ![dnp]
  ~

# Coverage Metrics

## [LULESH](https://codesign.llnl.gov/lulesh.php) DOE Mini Application

```javascript
Average % Dynamic Instruction Coverage Provided by PRESAGE under Error Model I: 18.49 %
Average % Dynamic Instruction Coverage Provided by PRESAGE under Error Model II: 18.40 %
% Static Instruction Coverage Provided by PRESAGE under Error Model I: 19.63 %
% Static Instruction Coverage Provided by PRESAGE under Error Model II: 28.09 %
```
![lulcov]


| Problem Size | Total DIC I | DIC EM I | % Coverage EM I | DIC EM II | % Coverage EM II | % Total Coverage |
|:--------------:|:-------------:|:----------:|:-----------------:|:-----------:|:------------------:|:------------------:|
| 8            | 169090      | 30022    | 17.755042       | 30181     | 17.849074        | 35.604116        |
| 12           | 547509      | 99809    | 18.229655       | 99789     | 18.226002        | 36.455656        |
| 16           | 1276530     | 234932   | 18.403954       | 234359    | 18.359067        | 36.763022        |
| 20           | 2470786     | 456991   | 18.495774       | 455239    | 18.424866        | 36.92064         |
| 24           | 4248049     | 787586   | 18.539946       | 783913    | 18.453483        | 36.993429        |
| 28           | 6724658     | 1248317  | 18.563279       | 1241697   | 18.464835        | 37.028114        |
| 32           | 10016902    | 1860784  | 18.576442       | 1850107   | 18.469852        | 37.046294        |
| 36           | 14240894    | 2646587  | 18.584416       | 2630427   | 18.47094         | 37.055356        |
| 40           | 19513007    | 3627326  | 18.589272       | 3604205   | 18.470782        | 37.060054        |
| 44           | 25949140    | 4824601  | 18.592528       | 4792693   | 18.469564        | 37.062091        |
| 48           | 33665818    | 6260012  | 18.594564       | 6217471   | 18.468201        | 37.062765        |
| 52           | 42778939    | 7955159  | 18.595971       | 7899759   | 18.466468        | 37.062439        |
| 56           | 53404957    | 9931642  | 18.596854       | 9861169   | 18.464895        | 37.061749        |
| 60           | 65659794    | 12211061 | 18.597471       | 12122889  | 18.463185        | 37.060655        |
| 64           | 79659935    | 14815016 | 18.597826       | 14706563  | 18.461681        | 37.059507        |




  [dnf]: http://www.cs.utah.edu/~vinu/research/stencils/presage/presage_results/vizs/barc/dnf.gif { width:400px; vertical-align:middle }
  [dnp]: http://www.cs.utah.edu/~vinu/research/stencils/presage/presage_results/vizs/barc/dnp.gif { width:400px; vertical-align:middle }

  [lulcov]: http://www.cs.utah.edu/~vinu/research/stencils/presage/presage_results/vizs/barc/luleshCov.png { width:50pc; vertical-align:middle }
